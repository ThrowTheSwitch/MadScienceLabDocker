## Base Docker Image
## minideb is a slim Debian base image well maintained by VMWare
## https://github.com/bitnami/minideb
FROM bitnami/minideb:bookworm

# This image is meant to include multi-platform support via Docker's buildx/BuildKit client and service. 
# In recent versions of Docker desktop `docker build` uses the buildx client by default. Under such a build,
# the build argument TARGETPLATFORM is set automatically.
#
# If this image is built without buildx/BuildKit, the build argument below must be set from the command line. 
# The command line must include `--build-arg TARGETPLATFORM=<platform>` where platform is a Docker-
# recognized platform string (e.g. "linux/amd64").
ARG TARGETPLATFORM

# Capture TARGETPLATFORM as an environment variable in the image
ENV CONTAINER_PLATFORM=$TARGETPLATFORM

##
## Docker Image Best Practices
## https://docs.docker.com/develop/develop-images/instructions/
##

## Metadata
LABEL org.opencontainers.image.source=https://github.com/ThrowTheSwitch/MadScienceLabDocker
LABEL org.opencontainers.image.url=https://github.com/ThrowTheSwitch/MadScienceLabDocker/blob/master/README.md
LABEL org.opencontainers.image.base.name=docker.io/bitnami/minideb
LABEL org.opencontainers.image.title="Mad Science Lab"
LABEL org.opencontainers.image.description="Contains Ceedling, supporting frameworks, and GNU C toolchain to provide a unit testing and build system environment for C projects"

# Docker image tag for internal container use
ENV MADSCIENCELAB_TAGNUM=<%= @tagnum -%>

# Image base / set up
RUN set -ex \
  # Update package management environment
  && apt update \
  && apt -y upgrade \
<%# INSERT SETUP BLOCKS -%>
<% @setup.each {|block| %><%= block.concat("\n") %><% } -%>
  && apt install -y \
<%# INSERT PACKAGE LIST TO INSTALL -%>
<% @packages.each {|package|%><%= "     #{package} \\\n"%><% } -%>
     --no-install-recommends \
  && apt autoremove \
  && apt clean \
  && rm -rf /var/lib/apt/lists/*

##
## Locale setting for Ruby encoding handling
##
## https://stackoverflow.com/questions/17031651/rails-invalid-byte-sequence-in-us-ascii-argument-error-when-i-run-rake-dbsee
## https://www.graalvm.org/latest/reference-manual/ruby/UTF8Locale/
##

# Set environment variables
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Run Debian locale setting operation
RUN set -ex \
  # Uncomment the en_US.UTF-8 line in /etc/locale.gen
  && sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen \
  # locale-gen generates locales for all uncommented locales in /etc/locale.gen
  && locale-gen

<%# INSERT ASSET HANDLING BLOCKS -%>
<% @assets.each {|block| -%>
<%= block + " \n" %>
<% } -%>

<%# INSERT BUILD / INSTALLATION BLOCKS -%>
<% @build.each {|block| -%>
<%= block + " \n" %>
<% } -%>

##
## Permissions Security & Cleanup
## - After necessary installations, etc. as root user ensure default container user is not root
## - Create user `dev` (with group 999) and make `dev` the default user
## - Delete /assets directory
##

RUN set -ex \
  && groupadd -r nonroot --gid 999 \
  && useradd -s /usr/bin/zsh -r -g nonroot dev

# Set up new user home directory and cleanup /assets
RUN set -ex \
  # Give the new user home directory +rwx permissions to group members
  # This will allow us to dynamically specify the host user for the container but give them group permissions
  && mkdir -p /home/dev \
  && chown dev:nonroot /home/dev \
  && chmod -R ug+rwx /home/dev \
  # Copy simple Z shell config file & give new user permissions
  && cp /assets/base/shell/zshrc /home/dev/.zshrc \
  && chown dev:nonroot /home/dev/.zshrc \
  # Copy welcome file & give new user permissions
  && cp /assets/<%= @variant_dir -%>/shell/welcome /home/dev/.welcome \
  && chown dev:nonroot /home/dev/.welcome \
  # Cleanup assets
  && rm -rf /assets

# Become / set new user
USER dev

<%# INSERT USER-LEVEL BLOCKS -%>
<% @user.each {|block| -%>
<%= block + " \n" %>
<% } -%>

WORKDIR /home/dev/project

# When the container launches, run a shell that launches in WORKDIR
CMD ["/usr/bin/zsh"]

