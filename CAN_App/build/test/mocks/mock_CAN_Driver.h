/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CAN_DRIVER_H
#define _MOCK_CAN_DRIVER_H

#include "unity.h"
#include "CAN_Driver.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_CAN_Driver_Init(void);
void mock_CAN_Driver_Destroy(void);
void mock_CAN_Driver_Verify(void);




#define CANSPIRead_IgnoreAndReturn(cmock_retval) CANSPIRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void CANSPIRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define CANSPIRead_StopIgnore() CANSPIRead_CMockStopIgnore()
void CANSPIRead_CMockStopIgnore(void);
#define CANSPIRead_ExpectAndReturn(idRx, dataRxTx, dataRxLen, canRcvFlags, cmock_retval) CANSPIRead_CMockExpectAndReturn(__LINE__, idRx, dataRxTx, dataRxLen, canRcvFlags, cmock_retval)
void CANSPIRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* idRx, uint8_t* dataRxTx, uint8_t* dataRxLen, uint8_t* canRcvFlags, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_CANSPIRead_CALLBACK)(uint32_t* idRx, uint8_t* dataRxTx, uint8_t* dataRxLen, uint8_t* canRcvFlags, int cmock_num_calls);
void CANSPIRead_AddCallback(CMOCK_CANSPIRead_CALLBACK Callback);
void CANSPIRead_Stub(CMOCK_CANSPIRead_CALLBACK Callback);
#define CANSPIRead_StubWithCallback CANSPIRead_Stub
#define CANSPIRead_ReturnThruPtr_idRx(idRx) CANSPIRead_CMockReturnMemThruPtr_idRx(__LINE__, idRx, sizeof(uint32_t))
#define CANSPIRead_ReturnArrayThruPtr_idRx(idRx, cmock_len) CANSPIRead_CMockReturnMemThruPtr_idRx(__LINE__, idRx, cmock_len * sizeof(*idRx))
#define CANSPIRead_ReturnMemThruPtr_idRx(idRx, cmock_size) CANSPIRead_CMockReturnMemThruPtr_idRx(__LINE__, idRx, cmock_size)
void CANSPIRead_CMockReturnMemThruPtr_idRx(UNITY_LINE_TYPE cmock_line, uint32_t* idRx, size_t cmock_size);
#define CANSPIRead_ReturnThruPtr_dataRxTx(dataRxTx) CANSPIRead_CMockReturnMemThruPtr_dataRxTx(__LINE__, dataRxTx, sizeof(uint8_t))
#define CANSPIRead_ReturnArrayThruPtr_dataRxTx(dataRxTx, cmock_len) CANSPIRead_CMockReturnMemThruPtr_dataRxTx(__LINE__, dataRxTx, cmock_len * sizeof(*dataRxTx))
#define CANSPIRead_ReturnMemThruPtr_dataRxTx(dataRxTx, cmock_size) CANSPIRead_CMockReturnMemThruPtr_dataRxTx(__LINE__, dataRxTx, cmock_size)
void CANSPIRead_CMockReturnMemThruPtr_dataRxTx(UNITY_LINE_TYPE cmock_line, uint8_t* dataRxTx, size_t cmock_size);
#define CANSPIRead_ReturnThruPtr_dataRxLen(dataRxLen) CANSPIRead_CMockReturnMemThruPtr_dataRxLen(__LINE__, dataRxLen, sizeof(uint8_t))
#define CANSPIRead_ReturnArrayThruPtr_dataRxLen(dataRxLen, cmock_len) CANSPIRead_CMockReturnMemThruPtr_dataRxLen(__LINE__, dataRxLen, cmock_len * sizeof(*dataRxLen))
#define CANSPIRead_ReturnMemThruPtr_dataRxLen(dataRxLen, cmock_size) CANSPIRead_CMockReturnMemThruPtr_dataRxLen(__LINE__, dataRxLen, cmock_size)
void CANSPIRead_CMockReturnMemThruPtr_dataRxLen(UNITY_LINE_TYPE cmock_line, uint8_t* dataRxLen, size_t cmock_size);
#define CANSPIRead_ReturnThruPtr_canRcvFlags(canRcvFlags) CANSPIRead_CMockReturnMemThruPtr_canRcvFlags(__LINE__, canRcvFlags, sizeof(uint8_t))
#define CANSPIRead_ReturnArrayThruPtr_canRcvFlags(canRcvFlags, cmock_len) CANSPIRead_CMockReturnMemThruPtr_canRcvFlags(__LINE__, canRcvFlags, cmock_len * sizeof(*canRcvFlags))
#define CANSPIRead_ReturnMemThruPtr_canRcvFlags(canRcvFlags, cmock_size) CANSPIRead_CMockReturnMemThruPtr_canRcvFlags(__LINE__, canRcvFlags, cmock_size)
void CANSPIRead_CMockReturnMemThruPtr_canRcvFlags(UNITY_LINE_TYPE cmock_line, uint8_t* canRcvFlags, size_t cmock_size);
#define CANSPIRead_IgnoreArg_idRx() CANSPIRead_CMockIgnoreArg_idRx(__LINE__)
void CANSPIRead_CMockIgnoreArg_idRx(UNITY_LINE_TYPE cmock_line);
#define CANSPIRead_IgnoreArg_dataRxTx() CANSPIRead_CMockIgnoreArg_dataRxTx(__LINE__)
void CANSPIRead_CMockIgnoreArg_dataRxTx(UNITY_LINE_TYPE cmock_line);
#define CANSPIRead_IgnoreArg_dataRxLen() CANSPIRead_CMockIgnoreArg_dataRxLen(__LINE__)
void CANSPIRead_CMockIgnoreArg_dataRxLen(UNITY_LINE_TYPE cmock_line);
#define CANSPIRead_IgnoreArg_canRcvFlags() CANSPIRead_CMockIgnoreArg_canRcvFlags(__LINE__)
void CANSPIRead_CMockIgnoreArg_canRcvFlags(UNITY_LINE_TYPE cmock_line);
#define mikrobus_logWrite_Ignore() mikrobus_logWrite_CMockIgnore()
void mikrobus_logWrite_CMockIgnore(void);
#define mikrobus_logWrite_StopIgnore() mikrobus_logWrite_CMockStopIgnore()
void mikrobus_logWrite_CMockStopIgnore(void);
#define mikrobus_logWrite_Expect(dataRxTx, opt) mikrobus_logWrite_CMockExpect(__LINE__, dataRxTx, opt)
void mikrobus_logWrite_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* dataRxTx, const LOGOPT_t opt);
typedef void (* CMOCK_mikrobus_logWrite_CALLBACK)(uint8_t* dataRxTx, const LOGOPT_t opt, int cmock_num_calls);
void mikrobus_logWrite_AddCallback(CMOCK_mikrobus_logWrite_CALLBACK Callback);
void mikrobus_logWrite_Stub(CMOCK_mikrobus_logWrite_CALLBACK Callback);
#define mikrobus_logWrite_StubWithCallback mikrobus_logWrite_Stub
#define mikrobus_logWrite_ReturnThruPtr_dataRxTx(dataRxTx) mikrobus_logWrite_CMockReturnMemThruPtr_dataRxTx(__LINE__, dataRxTx, sizeof(uint8_t))
#define mikrobus_logWrite_ReturnArrayThruPtr_dataRxTx(dataRxTx, cmock_len) mikrobus_logWrite_CMockReturnMemThruPtr_dataRxTx(__LINE__, dataRxTx, cmock_len * sizeof(*dataRxTx))
#define mikrobus_logWrite_ReturnMemThruPtr_dataRxTx(dataRxTx, cmock_size) mikrobus_logWrite_CMockReturnMemThruPtr_dataRxTx(__LINE__, dataRxTx, cmock_size)
void mikrobus_logWrite_CMockReturnMemThruPtr_dataRxTx(UNITY_LINE_TYPE cmock_line, uint8_t* dataRxTx, size_t cmock_size);
#define mikrobus_logWrite_IgnoreArg_dataRxTx() mikrobus_logWrite_CMockIgnoreArg_dataRxTx(__LINE__)
void mikrobus_logWrite_CMockIgnoreArg_dataRxTx(UNITY_LINE_TYPE cmock_line);
#define mikrobus_logWrite_IgnoreArg_opt() mikrobus_logWrite_CMockIgnoreArg_opt(__LINE__)
void mikrobus_logWrite_CMockIgnoreArg_opt(UNITY_LINE_TYPE cmock_line);
#define Delay_1sec_Ignore() Delay_1sec_CMockIgnore()
void Delay_1sec_CMockIgnore(void);
#define Delay_1sec_StopIgnore() Delay_1sec_CMockStopIgnore()
void Delay_1sec_CMockStopIgnore(void);
#define Delay_1sec_Expect() Delay_1sec_CMockExpect(__LINE__)
void Delay_1sec_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_Delay_1sec_CALLBACK)(int cmock_num_calls);
void Delay_1sec_AddCallback(CMOCK_Delay_1sec_CALLBACK Callback);
void Delay_1sec_Stub(CMOCK_Delay_1sec_CALLBACK Callback);
#define Delay_1sec_StubWithCallback Delay_1sec_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
